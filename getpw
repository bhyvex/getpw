#!/usr/bin/perl -w
##############################################################################
## getpw
## Written by: Matt Pascoe <matt@opennetadmin.com>
## 
## License:
##  getpw (hereafter referred to as "program") is free software;
##  you can redistribute it and/or modify it under the terms of the GNU General
##  Public License as published by the Free Software Foundation; either version
##  2 of the License, or (at your option) any later version.
##  Note that when redistributing modified versions of this source code, you
##  must ensure that this disclaimer and the above coder's names are included
##  VERBATIM in the modified code.
##  
## Disclaimer:
##  This program is provided with no warranty of any kind, either expressed or
##  implied.  It is the responsibility of the user (you) to fully research and
##  comprehend the usage of this program.  As with any tool, it can be misused,
##  either intentionally (you're a vandal) or unintentionally (you're a moron).
##  THE AUTHOR(S) IS(ARE) NOT RESPONSIBLE FOR ANYTHING YOU DO WITH THIS PROGRAM
##  or anything that happens because of your use (or misuse) of this program,
##  including but not limited to anything you, your lawyers, or anyone else
##  can dream up.  And now, a relevant quote directly from the GPL:
##    
## NO WARRANTY
## 
##  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
##  FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
##  OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
##  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
##  OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
##  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
##  TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
##  PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
##  REPAIR OR CORRECTION.
##    
## The GNU GPL can be found at http://www.fsf.org/copyleft/gpl.html
##
##############################################################################
## 
## Description
## 
##  getpw is a utility for looking up passwords based on a type and an IP
##  address range for the host itself
## 
##############################################################################
##  
##  Changelog:
##      
##      10/27/2015 - v1.02 - Matt Pascoe
##          - fix qw as parentheses and remove use Switch
##      1/2/2007 - v1.00 - Matt Pascoe
##          - Initial
##      
##      
##############################################################################
use strict;
use IO::Socket;

## Load Time::HiRes if it's available
eval { require Time::HiRes; };
unless ($@) {
    Time::HiRes->import (qw(time));
}

# Get the value of /etc/onabase
our $onabase = '';
$onabase = `cat /etc/onabase` or $onabase = '';
$onabase =~ s/\s+//;

##
## CONFIGURATION VARIABLES
## The defaults set here are only used if they are not defined in 
## a configuration file or on the command line.  Use "our" rather
## than "my" to declare super-global variables that need to be 
## accessed and modified in the functions loaded from other files.
##


## General configuration settings
our %conf = (
    
    ## Program details
    'version'              => '1.02',                          ## The version of this program
    'authorName'           => 'Matt Pascoe',                   ## Author's Name
    'authorEmail'          => 'matt@opennetadmin.com',         ## Author's Email Address
    'passwordFile'         => $onabase.'/etc/getpw.conf',      ## Set the default password file location.  Use -f to change on commandline
    
    ## For printing colors to the console
    'colorBold'            => "\033[1m",
    'colorNoBold'          => "\033[0m",
    'colorWhite'           => "\033[37;1m",
    'colorNormal'          => "\033[m",
    'colorRed'             => "\033[31;1m",
    'colorGreen'           => "\033[32;1m",
    'colorCyan'            => "\033[36;1m",

    ## No need to touch these
    'programName'          => $0,                              ## The name of this program
    'hostname'             => 'localhost',                     ## Used in printmsg() for all output.
    
);


## Logging options
our %logging = (
    
    # Default logging items, adjust via command line options
    'stdout'                 => 1,                             ## Print messages to stdout  (0=no, 1=yes)
    'logFile'                => '',                            ## Log messages to specified file
    'logging'                => 0,                             ## Log messages - don't set manually! set logFile option. (0=no, 1=yes)
    'syslog'                 => 0,                             ## Syslog messages  (0=no, 1=yes)
    'facility'               => 1,                             ## Syslog faciltiy (1 == USER)
    'priority'               => 6,                             ## Syslog priority (6 == INFO)

);


## This is a global hash to make life easy.  Info about the 
## state of the program or temporary messages get stored in here.
our %self = (
    'error'                  => '',
    'exitstatus'             => 0,
);


## Debug/Verbosity level of the script.
## This is it's own scalar (rather than in a hash) to improve speed.
our $debug = 0;



##
## INITIALIZATION
## Here is a small bit of initialization code that gets run
## before everything else.
##

## Fixup $conf{'programName'}
$conf{'programName'} =~ s/(.)*[\/,\\]//;
$0 = $conf{'programName'} . " " . join(" ", @ARGV);

## Fixup $conf{'hostname'}
if ($conf{'hostname'} eq 'localhost') {
    $conf{'hostname'} = "";
    
    if ($ENV{'HOSTNAME'}) {
        $conf{'hostname'} = lc($ENV{'HOSTNAME'});
    }
    elsif ($ENV{'COMPUTERNAME'}) {
        $conf{'hostname'} = lc($ENV{'COMPUTERNAME'});
    }
    else {
        ## Try the hostname module
        eval { require Sys::Hostname; };
        unless ($@) {
            Sys::Hostname->import (qw(hostname));
            $conf{'hostname'} = lc(hostname());
        }
    }
    
    ## Assign a name of "localhost" if it can't find anything else.
    if (!$conf{'hostname'}) {
        $conf{'hostname'} = 'localhost';
    }
    
    $conf{'hostname'} =~ s/\..*$//;  ## Remove domain name if it's present
}











###############################################################################################
##  Function:    printmsg (string $message, [int $level], [*FILEHANDLE])
##
##  Description: Handles all messages - 
##               Depending on the state of the program it will log
##               messages to a log file, print them to STDOUT or both.
##               
##
##  Input:       $message          A message to be printed, logged, etc.
##               $level            The debug level of the message. If not defined 0
##                                 will be assumed.  0 is considered a normal message, 
##                                 1 and higher is considered a debug message.
##               $filehandle       Optional reference to a filehandle to print to rather than
##                                 printing to STDOUT.
##  
##  Output:      Prints to STDOUT, to $logging{'LOGHANDLE'}, both, or none depending 
##               on the state of the program and the debug level specified.
##  
##  Example:     printmsg("ERROR => The file could not be opened!", 0);
###############################################################################################
sub printmsg {
    ## Assign incoming parameters to variables
    my ( $message, $level, $fh ) = @_;
    
    ## Make sure input is sane
    $level = 0 if (!defined($level));
    
    ## Continue only if the debug level of the program is >= message debug level.
    if ($debug >= $level) {
        
        ## Use STDOUT if a filehandle wan't specified
        if (!$fh) {
            $fh = *STDOUT;
        }
        
        ## Change \r\n's to spaces
        $message =~ s/\r?\n/ /go;
        
        ## Get the date in the format: Dec  3 11:14:04
        my ($sec, $min, $hour, $mday, $mon) = localtime();
        $mon = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')[$mon];
        my $date = sprintf("%s %02d %02d:%02d:%02d", $mon, $mday, $hour, $min, $sec);
        
        ## Syslog the message is needed
        if ($logging{'syslog'}) {
            syslog('/dev/log', $logging{'priority'}, $logging{'facility'}, "$conf{'programName'}\[$$\]: $message");
        }
        
        ## Print to STDOUT always if debugging is enabled, or if the mode is NOT "running".
        if ($logging{'stdout'}) {
            print {$fh} "$date $conf{'hostname'} $conf{'programName'}\[$$\]: $message\n";
        }
        
        ## Print to the log file if $logging{'logging'} is true
        if ($logging{'logging'}) {
            print {$logging{'LOGHANDLE'}} "$date $conf{'hostname'} $conf{'programName'}\[$$\]: $message\n";
        }
        
    }
    
    ## Return 0 errors
    return(0);
}














###############################################################################################
## FUNCTION:    
##   openLogFile ( $filename )
## 
## 
## DESCRIPTION: 
##   Opens the file $filename and attaches it to the filehandle "$logging{'LOGHANDLE'}".  Returns 0 on success
##   and non-zero on failure.  Error codes are listed below, and the error message gets set in
##   global variable $!.
##   
##   
## Example: 
##   openFile ("/var/log/scanAlert.log");
##
###############################################################################################
sub openLogFile {
    ## Get the incoming filename
    my $filename = $_[0];
    
    ## Make sure our file exists, and if the file doesn't exist then create it
    if ( ! -f $filename ) {
        printmsg("NOTICE => The file [$filename] does not exist.  Creating it now with mode [0600].", 0);
        open ($logging{'LOGHANDLE'}, ">>$filename");
        close $logging{'LOGHANDLE'};
        chmod (0600, $filename);
    }
    
    ## Now open the file and attach it to a filehandle
    open ($logging{'LOGHANDLE'},">>$filename") or return (1);
    
    ## Put the file into non-buffering mode
    select $logging{'LOGHANDLE'};
    $| = 1;
    select STDOUT;
    
    ## Tell the rest of the program that we can log now
    $logging{'logging'} = 1;
    
    ## Return success
    return(0);
}

















###############################################################################################
## FUNCTION:    
##   syslog (string $socketName, int $priority, int $facility, string $message)
## 
## 
## DESCRIPTION: 
##   Connects to the socket $socketName, and sends it a syslog formatted message.  
##   i.e. it syslog's $message with the priority and facility specified.
##   Returns 0 on success, non-zero on error.  If an error occurs the error message
##   is stored in the global variable $self{'error'}.
##
## Example: 
##   syslog("/dev/log", 6, 1, "Test syslog message");
##
##
## Priorities (on a Linux system)
##   LOG_EMERG       0       system is unusable
##   LOG_ALERT       1       action must be taken immediately
##   LOG_CRIT        2       critical conditions
##   LOG_ERR         3       error conditions
##   LOG_WARNING     4       warning conditions
##   LOG_NOTICE      5       normal but significant condition
##   LOG_INFO        6       informational
##   LOG_DEBUG       7       debug-level messages
##
##
## Facilities (on a Linux system)
##   LOG_KERN        0       kernel messages
##   LOG_USER        1       random user-level messages
##   LOG_MAIL        2       mail system
##   LOG_DAEMON      3       system daemons
##   LOG_AUTH        4       security/authorization messages
##   LOG_SYSLOG      5       messages generated internally by syslogd
##   LOG_LPR         6       line printer subsystem
##   LOG_NEWS        7       network news subsystem
##   LOG_UUCP        8       UUCP subsystem
##   LOG_CRON        9       clock daemon
##   LOG_AUTHPRIV    10      security/authorization messages (private)
##   LOG_FTP         11      ftp daemon
##   LOG_LOCAL0      16      reserved for local use
##   LOG_LOCAL1      17      reserved for local use
##   LOG_LOCAL2      18      reserved for local use
##   LOG_LOCAL3      19      reserved for local use
##   LOG_LOCAL4      20      reserved for local use
##   LOG_LOCAL5      21      reserved for local use
##   LOG_LOCAL6      22      reserved for local use
##   LOG_LOCAL7      23      reserved for local use
##
## v1.1 - 01/16/2004 - Textual changes to error messages
## v1.2 - 03/27/2004 - Remove hashes to improve performance
###############################################################################################
sub syslog {
    
    ## Get incoming variables
    my ($socketName, $priority, $facility, $message) = @_;
    
    ## Set defaults if some variables are not defined
    $socketName  = "/dev/log"         if (!defined($socketName));
    $priority    = 6                  if (!defined($priority));
    $facility    = 1                  if (!defined($facility));
    $message     = "Default Message"  if (!defined($message));
    
    ## Bit-shift the facility (black magic)
    $facility = ($facility << 3);
    
    ## Make sure values are sane (more black magic)
    $priority = $priority & 0x07;
    $facility = $facility & 0x3f8;
    
    ## Generate syslog value for the priority and facility
    my $value = ($priority + $facility);
    
    if (! -S $socketName) {
        $self{'error'} = "ERROR => The specified syslog socket [$socketName] either does not exist or is not a socket.";
        return(1);
    }
    
    ## Open a UNIX socket in dgram mode with udp protocol. 
    socket(SOCKET, PF_UNIX, SOCK_DGRAM, 0) or do { 
        $self{'error'} = "ERROR => syslog(): $!";
        return(2);
    };
    
    ## Connect our socket to SOCKET
    connect(SOCKET, sockaddr_un ($socketName)) or do {
        $self{'error'} = "ERROR => syslog(): $!";
        return(3);
    };
    
    ## Sending the message to the syslog socket
    print SOCKET "<$value>$message" or do {
        $self{'error'} = "ERROR => syslog(): $!";
        return(4);
    };
    
    ## Close the socket
    close SOCKET;
    
    ## Return success
    return(0);
}


















######################################################################
##  Function:    quit (string $message, int $errorLevel)
##  
##  Description: Exits the program, optionally printing $message.  It 
##               returns an exit error level of $errorLevel to the 
##               system  (0 means no errors, and is assumed if empty.)
##
##  Example:     quit("Exiting program normally", 0);
######################################################################
sub quit {
    my ( $message, $errorLevel ) = @_;
    $errorLevel = 0 if (!defined($errorLevel));
    
    ## Print exit message
    if ($message) { 
        ## Change the syslog facility to 3/daemon if there is an exit error.
        if ($errorLevel >= 0) {
            $logging{'facility'} = 3;
        }
        printmsg($message, 0);
    }
    
    ## Exit
    exit($errorLevel);
}
















#########################################################
## SUB: help
##
## For all those newbies ;)
#########################################################
sub help {
print <<EOM;

$conf{'colorBold'}$conf{'programName'}-$conf{'version'} by $conf{'authorName'} <$conf{'authorEmail'}>$conf{'colorNoBold'}

Synopsis:
 $conf{'programName'} allows you to look up passwords for specified devices based on
 a specified type of password.  Its intention is to be used by scripts
 that connect to other devices or services that require a password.

 The password list that is returned can then be looped through by your script
 until one is successful.

Usage:
  $conf{'programName'} -h HOSTNAME|IP -t TYPE [-f FILENAME] [-p POSITION]
  
$conf{'colorRed'}  Required: $conf{'colorNormal'}
    -h HOSTNAME or IP       The DNS name or IP address of the device 
    -t TYPE                 The password type to return

$conf{'colorGreen'}  Optional: $conf{'colorNormal'}
    -f FILENAME             The path to an alternate password file
                            Defaults to: $conf{'passwordFile'}
    -p POSITION             Returns the password in position specified.
                            Must be a number from 1-9.

$conf{'colorGreen'}  Logging Options: $conf{'colorNormal'}
    --nostdout              Don't print messages to STDOUT
    --syslog                Syslog all messages
    --logfile=FILE          Log all messages to the specified file

Example:
 \$>getpw -h 10.1.1.1 -t snmpro
 pass1,pass2,pass3

EOM
exit(1);
}










######################################################################
##  Function: initialize ()
##  
##  Does all the script startup jibberish.
##  
######################################################################
sub initialize {
    
    ## Set STDOUT to flush immediatly
    $| = 1;
    
    ## Intercept signals
    $SIG{'QUIT'}  = sub { quit("EXITING: Received SIG$_[0]", 1); };
    $SIG{'INT'}   = sub { quit("EXITING: Received SIG$_[0]", 1); };
    $SIG{'KILL'}  = sub { quit("EXITING: Received SIG$_[0]", 1); };
    $SIG{'TERM'}  = sub { quit("EXITING: Received SIG$_[0]", 1); };
    
    $SIG{'HUP'}   = sub { quit("EXITING: Received SIG$_[0]", 1); };
    $SIG{'ALRM'}  = sub { quit("EXITING: Received SIG$_[0]", 1); };
    
    ## Let children exit on their own so the parent doesn't have to reap them.
    ## $SIG{'CHLD'}  = 'IGNORE';
    
    return(0);
}











######################################################################
##  Function: processCommandLine ()
##  
##  Processes command line storing important data in global var %conf
##  
######################################################################
sub processCommandLine {
    
    
    ############################
    ##  Process command line  ##
    ############################
    
    my @ARGS = @ARGV;
    my $numargv = @ARGS;
    help() unless ($numargv or $self{'module'});
    my $counter = 0;
    $self{'position'} = 0;

    for ($counter = 0; $counter < $numargv; $counter++) {
        
        ## verbosity
        if ($ARGS[$counter] =~ /^-v+/io) {
            $debug += (length($&) - 1);
        }

        ## OPTION: Host name or ip
        elsif ($ARGS[$counter] eq '-h') {
            $counter++;
	    ## if -h has no name or ip, print help
	    if (!$ARGS[$counter]) {
		help();
	    }
            ## Convert from a name to IP
            $self{'host'} = $ARGS[$counter];
            if ($ARGS[$counter]  =~ m/\D+/) {
                if (inet_aton($self{'host'})) {
                    $self{'host'} = inet_ntoa(inet_aton($self{'host'}));
                }
                else {
                    printmsg("\"$ARGS[$counter]\" was not found in DNS!", 0);
                    quit("", 1);
                }
	    }
        }

        ## OPTION: file name
        elsif ($ARGS[$counter] eq '-f') {
            $counter++;
            $conf{'passwordFile'} = $ARGS[$counter];
        }

        ## OPTION: password type
        elsif ($ARGS[$counter] eq '-t') {
            $counter++;
            $self{'type'} = $ARGS[$counter];
        }

        ## OPTION: first item
        elsif ($ARGS[$counter] eq '-p') {
            $counter++;
            $self{'position'} = $ARGS[$counter];
        }

        ## syslog is enabled
        elsif ($ARGS[$counter] =~ /^--syslog/i) {
            $logging{'syslog'} = 1;
        }

        ## nostdout
        elsif ($ARGS[$counter] =~ /^--nostdout/i) {
            $logging{'stdout'} = 0;
        }

        ## log file
        elsif ($ARGS[$counter] =~ /^--logfile=(.*)/i) {
            $logging{'logFile'} = $1;
        }


        elsif ($ARGS[$counter] =~ /^--help/) {
	    help();
	}
        
        else {
            printmsg("\"$ARGS[$counter]\" is not a recognised option!", 0);
            quit("", 1);
        }
        
    }
    
    
    ###################################################
    ##  Input validation
    ###################################################

    ## Print help if we didnt get both -t and -p option
    if (!$self{'type'}) {
        quit("WARNING => You must specify the -t option, try --help!",1);
    }
    
    
    if (!$self{'host'}) {
        quit("WARNING => You must specify the -h option, try --help!",1);
    }
    
    ## Open the log file if we need to
    if ($logging{'logFile'}) {
        if (openLogFile($logging{'logFile'})) {
            printmsg("WARNING => Log file could not be opened!", 0);
        }
    }
    
    ## Return 0 errors
    return(0);
}












###############################################################################################
## FUNCTION:
##   ip2int ( $ip_address )
##
##
## DESCRIPTION:
##   Converts an IP address to its integer form
##
## Example:
##   ip2int(1.1.1.0);
##
###############################################################################################
sub ip2int {
    my ($ip) = @_;

    if ($ip =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/) {
      return 256*(256*(256*$1+$2)+$3)+$4;
    } else {
      return -1;
    }
}




###############################################################################################
## FUNCTION:
##   readPasswordFile ( string $filename, string $section, reference $hash_reference )
##
##
## DESCRIPTION:
##   Reads the file $filename, and stores information from the file into the hash
##   at $hash_reference.
##
## Example:
##   readPasswordFile("/etc/passwords.conf", "10.2.3.4", \%myHash);
##
###############################################################################################
sub readPasswordFile {

    ## Get incoming variables
    my ($fileName, $ip, $hashref) = @_;


    ## Open the file
    open(CONFFILE, $fileName) or quit("ERROR => Opening the configuration file [$fileName] returned the error [$!]",1);

    ## Read the file into a single scalar variable
    my $file = "";
    while (<CONFFILE>) { $file .= $_; }
    close(CONFFILE);

    ## Remove comments and whitespace
    $file =~ s/\/\*.*?\*\///ogs;      ## Remove C Style /* */ style comments
    $file =~ s/([^\\])\#.*$/$1/ogm;   ## Remove pound (#) comments - unless backslash escaped
    $file =~ s/\\\#/\#/ogm;           ## Replace '\#' with '#'
    $file =~ s/\/\/.*$//ogm;          ## Remove slash (//) comments
    $file =~ s/^\s*(\n|\r\n)//ogm;    ## Remove blank lines


    ## Find the section we want and store the lines of that section in @lines
    my $inSection = 0;
    foreach my $line (split(/\r?\n/, $file)) {
        printmsg("DEBUG => readPasswordFile() RAW line: $line", 4);
        if ($inSection == 1) {
            if ($line =~ /^\s*\[.*\]\s*$/) {
                ## We're at the end of the section (starting a new section), stop
                $inSection = 0;
                last;
            }
            ## This is a normal line in the section, parse it and add data to $hashref
            if ($line) {
                ## Remove whitespace
                $line =~ s/(^\s+)|(\s+$)//og;
                ## Don't continue unless the line looks valid
                next if ( (!$line) or ($line !~ /=>/) );
                ## Get and store the key/value pair
                my ($key, $value) = split(/\s*=>\s*/, $line);
                printmsg("DEBUG => readPasswordFile() [$ip] Found key value pair: $key => $value", 3);
                ${$hashref}{$key} = $value;
            }
        }
        ## If we found the right section, start recording it's lines to @lines
        if ($line =~ /^\s*\[.*\]\s*$/) {
            printmsg("DEBUG => readPasswordFile() Processing section: $line", 3);
            $line =~ s/^\s*\[//;
            $line =~ s/]\s*$//;
            my ($SECTION_NET, $SECTION_MASK) = split /\//, $line;
            my $SUBNET = ip2int($SECTION_NET);
            my $MASK   = ip2int($SECTION_MASK);
            my $IPINT  = ip2int($ip);
            my $ANDIT  = $IPINT & $MASK;
            printmsg("DEBUG => readPasswordFile() Search: $IPINT  StartIP: $SUBNET = anded: $ANDIT",4);
                
            if ($ANDIT == $SUBNET) {
              	printmsg("DEBUG => readPasswordFile() $ip Matched secion: $line", 3);
            	$inSection = 1;
            }
            else {
               next;
            }
        }
    }

    ## Return 0 errors
    return(0);
}

















#############################
##
##      MAIN PROGRAM
##
## FLOW:
## Process Command Line
##   if host is a name convert to ip
##   check permissions on password file to warn if they are insecure
##   open password file to process
## read file line by  line and  test host ip is within masked range defined on the line
## If the type matches an entry, return password list for specified type.
##
##
## Password file should be formatted as follows:
##
##     [STARTIP/MASK]
##     type1:password1,password2,....
##     type2:password1,password2,....
##
##     [1.1.1.0/255.255.255.0]
##     enable:one,two,three
##     snmpro:a,b,c
##
##
##
#############################

my %PASSTYPE = ();
my $TYPE = "";

## Initialize signal handlers and such
initialize();

## Process Command Line
processCommandLine();

## read file line by  line and  test host ip is within masked range defined on the line
readPasswordFile($conf{'passwordFile'}, $self{'host'}, \%PASSTYPE);

## If the type matches an entry, return password list for that type.
my $RESULT = $PASSTYPE{$self{'type'}};
if ($RESULT) { 
    ## strip the first password entry if -[0-9] was passed
    if ($self{'position'} > 0) {
        my @POS = split(/,/,$RESULT);
        if (scalar(@POS) >= $self{'position'}) {
            print "$POS[$self{'position'}-1]\n"; 
        }
        else { quit "ERROR => Requested password position greater than amount of passwords found.",1 }
    }
    ## Otherwise, print the whole thing
    else {
        print "$RESULT\n"; 
    }
}
else { quit "ERROR => Unable to match using type: $self{'type'}",1 }

## Quit with status
quit("", $self{'exitstatus'});
